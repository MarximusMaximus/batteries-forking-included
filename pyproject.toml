
[tool.poetry]
name = "batteries-forking-included"
# WARNING: Don't forget to update the version number in src/bfi/template/bfi-base.sh
version = "0.1.1"
description = "A Pytest plugin to drop duplicated tests during collection, but will prefer keeping nested packages."
authors = ["Marximus Maximus <marximus@marximus.com>"]
license = "MIT"
maintainers = ["Marximus Maximus <marximus@marximus.com>"]
readme = "README.md"
homepage = "https://github.com/MarximusMaximus/batteries-forking-included"
repository = "https://github.com/MarximusMaximus/batteries-forking-included"
documentation = "https://github.com/MarximusMaximus/batteries-forking-included"
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Testing",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: Implementation :: CPython",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
]
include = [
  "CHANGELOG.rst",
  "tests"
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/MarximusMaximus/batteries-forking-included/issues"
"Source" = "https://github.com/MarximusMaximus/batteries-forking-included"
"Documentation" = "https://github.com/MarximusMaximus/batteries-forking-included"

# poetry, pyOpenSSL, PySocks are installed and required by the conda env,
# including them here as ">1" will prevent poetry from uninstalling them or
# their dependencies
# similarly, we need to specify a valid version of python
[tool.poetry.dependencies]
poetry = ">1"
pyOpenSSL = ">1"
PySocks = ">1"
python = ">=3.8,<4"

[tool.poetry.dev-dependencies]
pytest-cov = "^3.0.0"
pipdeptree = "^2.2.1"
tox = "^3.25.0"
pytest-sugar = "^0.9.4"
mypy = "^0.950"
black = "^22.3.0"
Pygments = "^2.12.0"
restructuredtext-lint = "^1.4.0"
pytest-html = "^3.1.1"
pre-commit = "^2.18.1"
pip-licenses = "^3.5.4"
flake8 = "^4.0.1"
flake8-bugbear = "^22.4.25"
flake8-docstrings = "^1.6.0"
flake8-commas = "^2.1.0"
flake8-pyi = "^22.4.1"
colorama = "^0.4.4"
blacken-docs = "^1.12.1"
pre-commit-hooks-safety = {git = "https://github.com/Lucas-C/pre-commit-hooks-safety.git", rev = "v1.2.4"}
pygrep = "^0.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


# these options are used when running pytest directly on the command line,
#   via vscode, and during the 'coverage' env of tox
[tool.pytest.ini_options]
minversion = 7.1
# make XPASS ("unexpectedly passing") result to fail the test suite
xfail_strict = true
addopts = [
  # report details (verbose)
  "-v",
  # report the local variables for every failure with the stacktrace
  "-l",
  # report the reasons for all tests that skipped, xfailed, xpassed, etc EXCEPT passed/Passed w/ Output
  "-ra",
  # execute doctests directly from docstrings of your classes and functions
  "--doctest-modules",
  "--doctest-continue-on-failure",
  # coverage (configured via .coveragerc)
  "--cov",
  # track contexts in which lines are called
  "--cov-context=test",
  # output coverage to terminal
  "--cov-report=term",
  # output coverage as html report (for human browsing from CI)
  "--cov-report=html",
  # output coverage as xml report (for CI reporting and VSCode reporting)
  "--cov-report=xml",
  # show local variable values in traceback
  "--showlocals",
  # raise errors if using an unregistered marker
  "--strict-markers",
  # raise errors if the config is bad
  "--strict-config",
  # let's adopt the future mode already
  "--import-mode=importlib",
  # generate html report of test results (use the 'coverage' name for env b/c this is also used by that tox env)
  "--html=.reports/test-report-coverage.html",
  # html report should be single file
  "--self-contained-html",
]
filterwarnings = [
  "error",
]
log_cli_level = "debug"
testpaths = ["."]
pythonpath = ["."]

[tool.black]
target-version = [
  'py38',
  'py39',
  'py310',
]
line-length = 88
include = '\.pyi?$'
exclude = '''
  /(
      \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist

    # The following are specific to Black, you probably don't want those.
    | blib2to3
    | tests/data
  )/'''

# [tool.isort]
# verbose = true
# conda_env = "batteries-forking-included"
# multi_line_output = 3
# force_grid_wrap = 1
# indent = 4
# use_parentheses = true
# atomic = true
# lines_between_sections = 1
# include_trailing_comma = true
# force_alphabetical_sort_within_sections = true
# force_sort_within_sections = true
# group_by_package = true
# # ignore_comments = true
# remove_redundant_aliases = true
# # profile = "black"
# py_version = 38
# color_output = true
# src_paths = ["src", "tests"]
# sections = [
#     "FUTURE",
#     "STDLIB",
#     "DJANGOFIRST",
#     "DJANGOTHIRD",
#     "PANDAS",
#     "THIRDPARTY",
#     "FIRSTPARTY",
#     "LOCALFOLDER",
# ]
# default_section="THIRDPARTY"
# extra_standard_library = []
# known_djangofirst = ["django"]
# known_djangothird = [""]
# known_pandas = ["pandas","numpy"]
# known_third_party = []
# known_first_party = []
# known_local_folder = []

# comment_prefix = ""
# # import_heading_stdlib = "#===============================================================================\n#region Standard Library\n"
# # import_footer_stdlib = "\n#endregion Standard Library\n#==============================================================================="
# import_heading_stdlib = "#region Standard Library"
# import_footer_stdlib = "#endregion Standard Library"
